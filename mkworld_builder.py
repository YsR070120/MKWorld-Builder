# -*- coding: utf-8 -*-
"""mkworld-builder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/YsR070120/8c1924d15e9d57c00903b4697368e72b/mkworld-builder.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

uploaded = files.upload()

char_file = "char_stats.xlsx"
custom_file = "custom_stats.xlsx"

char_df = pd.read_excel(char_file, sheet_name="シート1")[1:].copy()
custom_df = pd.read_excel(custom_file, sheet_name="シート1")[1:].copy()

columns = ['名前', 'スピード_舗装路', 'スピード_悪路', 'スピード_水上', 'スピード_ゲーム内表記',
           '加速', '重さ', '曲がりやすさ_舗装路', '曲がりやすさ_悪路',
           '曲がりやすさ_水上', '曲がりやすさ_ゲーム内表記']

char_df.columns = columns
custom_df.columns = columns

for df in [char_df, custom_df]:
    for col in columns[1:]:
        df[col] = pd.to_numeric(df[col], errors='coerce')

def apply_character_specific_adjustments(char_name, custom_name, total_status):
    """
    特定キャラ + 特定カスタムのときに補正を加える
    """
    special_chars = ['ベビィピーチ', 'ベビィデイジー', 'バサバサ', 'パタテンテン', 'クッパ']
    special_customs = ['ファイアチャージャー', 'ロイヤルターボ', 'Bダッシュ', 'マッハクイーン',
                       'ラリーカート', 'タートルバギー', 'ケロケロード', 'スーパーカーペット',
                       'H₂O', 'ドッシーウェーブ', 'スターモービル']

    if char_name in special_chars and custom_name in special_customs:
        if 'スピード_ゲーム内表記' in total_status:
            total_status['スピード_ゲーム内表記'] -= 0.2
        if '曲がりやすさ_ゲーム内表記' in total_status:
            total_status['曲がりやすさ_ゲーム内表記'] += 0.2

    return total_status

import ipywidgets as widgets
from IPython.display import display
import numpy as np

group_mapping = {
    'Speed': [
        'スピード_舗装路', 'スピード_悪路', 'スピード_水上', 'スピード_ゲーム内表記'
    ],
    'Acceleration': ['加速'],
    'Weight': ['重さ'],
    'Handling': [
        '曲がりやすさ_舗装路', '曲がりやすさ_悪路', '曲がりやすさ_水上', '曲がりやすさ_ゲーム内表記'
    ]
}

group_colors = {
    'Speed': ['#96B1C8', '#79CE32', '#018DFF', '#FDC307'],
    'Acceleration': ['#FDC307'],
    'Weight': ['#FDC307'],
    'Handling': ['#96B1C8', '#79CE32', '#018DFF', '#FDC307']
}

char_names = char_df['名前'].dropna().unique().tolist()
custom_names = custom_df['名前'].dropna().unique().tolist()

char_dropdown = widgets.Dropdown(options=char_names, description='キャラ:')
custom_dropdown = widgets.Dropdown(options=custom_names, description='カスタム:')

import matplotlib.patches as mpatches

def update_grouped_graph(char_name, custom_name):
    total = get_total_status(char_name, custom_name)

    fig, ax = plt.subplots(figsize=(10, 6))

    y_labels = list(group_mapping.keys())
    bar_height = 0.15

    for i, (group, keys) in enumerate(group_mapping.items()):
        for j, key in enumerate(keys):
            if key in total:
                color = group_colors[group][j % len(group_colors[group])]
                ax.barh(
                    y=i + (j - len(keys)/2)*bar_height,
                    width=total[key],
                    height=bar_height * 0.9,
                    color=color
                )

    legend_patches = [
        mpatches.Patch(color='#96B1C8', label='舗装路'),
        mpatches.Patch(color='#79CE32', label='悪路'),
        mpatches.Patch(color='#018DFF', label='水上'),
        mpatches.Patch(color='#FDC307', label='ゲーム内表記'),
    ]
    ax.legend(handles=legend_patches, loc='upper right', fontsize='small', frameon=True)

    ax.set_yticks(np.arange(len(group_mapping)))
    ax.set_yticklabels(y_labels)
    ax.set_xlabel("Stat Value")
    ax.set_title(f"{char_name} + {custom_name} - Category Stats")
    ax.set_xlim(0, 4.5)
    ax.grid(True, axis='x', linestyle='--', alpha=0.5)
    ax.invert_yaxis()
    plt.tight_layout()
    plt.show()

ui = widgets.HBox([char_dropdown, custom_dropdown])
out = widgets.interactive_output(update_grouped_graph, {
    'char_name': char_dropdown,
    'custom_name': custom_dropdown
})

display(ui, out)