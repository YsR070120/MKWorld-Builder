# -*- coding: utf-8 -*-
"""mkworld-builder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/YsR070120/fc2b21abf107337ec6313fdad60c9105/mkworld-builder.ipynb
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ファイル読み込み
char_df = pd.read_excel("char_stats.xlsx", sheet_name="シート1")[1:].copy()
custom_df = pd.read_excel("custom_stats.xlsx", sheet_name="シート1")[1:].copy()

# 列名の設定
columns = ['Name', 'Speed_Paved', 'Speed_Offroad', 'Speed_Water', 'Speed_UI',
           'Acceleration', 'Weight', 'Handling_Paved', 'Handling_Offroad',
           'Handling_Water', 'Handling_UI']

char_df.columns = columns
custom_df.columns = columns

# 数値に変換
for df in [char_df, custom_df]:
    for col in columns[1:]:
        df[col] = pd.to_numeric(df[col], errors='coerce')

# 補正処理
def apply_character_specific_adjustments(char_name, custom_name, total_status):
    special_chars = ['ベビィピーチ', 'ベビィデイジー', 'バサバサ', 'パタテンテン', 'クッパ']
    special_customs = ['ファイアチャージャー', 'ロイヤルターボ', 'Bダッシュ', 'マッハクイーン',
                       'ラリーカート', 'タートルバギー', 'ケロケロード', 'スーパーカーペット',
                       'H₂O', 'ドッシーウェーブ', 'スターモービル']
    if char_name in special_chars and custom_name in special_customs:
        total_status["Speed_UI"] -= 0.2
        total_status["Handling_UI"] += 0.2
    return total_status

# 合計ステータスの取得
def get_total_status(char_name, custom_name):
    char_stats = char_df[char_df['Name'] == char_name].iloc[0]
    custom_stats = custom_df[custom_df['Name'] == custom_name].iloc[0]
    total = char_stats[1:] + custom_stats[1:]
    return apply_character_specific_adjustments(char_name, custom_name, total)

# グループ表示のための設定
group_mapping = {
    'Speed': ['Speed_Paved', 'Speed_Offroad', 'Speed_Water', 'Speed_UI'],
    'Acceleration': ['Acceleration'],
    'Weight': ['Weight'],
    'Handling': ['Handling_Paved', 'Handling_Offroad', 'Handling_Water', 'Handling_UI']
}

group_colors = {
    'Speed': ['#96B1C8', '#79CE32', '#018DFF', '#FDC307'],
    'Acceleration': ['#FDC307'],
    'Weight': ['#FDC307'],
    'Handling': ['#96B1C8', '#79CE32', '#018DFF', '#FDC307']
}

# Streamlit UI
st.title("マリカキャラ＋カスタム ステータス表示")

char_name = st.selectbox("キャラを選んでください", char_df['Name'].dropna().unique())
custom_name = st.selectbox("カスタムを選んでください", custom_df['Name'].dropna().unique())

# グラフの描画
if char_name and custom_name:
    total = get_total_status(char_name, custom_name)
    fig, ax = plt.subplots(figsize=(10, 6))
    y_labels = list(group_mapping.keys())
    bar_height = 0.15
    for i, (group, keys) in enumerate(group_mapping.items()):
        for j, key in enumerate(keys):
            if key in total:
                color = group_colors[group][j % len(group_colors[group])]
                ax.barh(
                    y=i + (j - len(keys)/2)*bar_height,
                    width=total[key],
                    height=bar_height * 0.9,
                    color=color,
                    label=key if i == 0 else ""
                )

    import matplotlib.patches as mpatches
    legend_patches = [
        mpatches.Patch(color='#96B1C8', label='Paved'),
        mpatches.Patch(color='#79CE32', label='Offroad'),
        mpatches.Patch(color='#018DFF', label='Water'),
        mpatches.Patch(color='#FDC307', label='UI Display'),
    ]
    ax.set_yticks(np.arange(len(group_mapping)))
    ax.set_yticklabels(y_labels)
    ax.set_xlabel("Stat Value")
    ax.set_title(f"{char_name} + {custom_name} - Category Stats")
    ax.set_xlim(0, 4.0)
    ax.grid(True, axis='x', linestyle='--', alpha=0.5)
    ax.invert_yaxis()
    ax.legend(handles=legend_patches, loc='upper right', fontsize='small', frameon=True)
    st.pyplot(fig)